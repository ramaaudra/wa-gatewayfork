<div class="main-content">
  <div class="content-wrapper container">
    <%- include('../layouts/alert') %>
    <div class="page-heading">
      <div class="page-title">
        <div class="row">
          <div class="col-12 col-md-6 order-md-1 order-last">
            <h3>Auto Reply Setting</h3>
            <p class="text-subtitle text-muted">
              Automatic Message Reply According to Keyword
            </p>
          </div>
          <div class="col-12 col-md-6 order-md-2 order-first">
            <nav
              aria-label="breadcrumb"
              class="breadcrumb-header float-start float-lg-end"
            >
              <ol class="breadcrumb">
                <li class="breadcrumb-item">
                  <a href="/dashboard">Dashboard</a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">
                  Reply
                </li>
              </ol>
            </nav>
          </div>
        </div>
      </div>
    </div>
    <div class="page-content">
      <section class="section">
        <div class="card">
          <div class="card-header">
            <h5 class="card-title">List Response</h5>
            <p class="text-subtitle text-muted">
              You can add auto-reply keywords via the button below
            </p>
          </div>
          <center>
            <button
              onclick="alertKeywordAutoReply(true)"
              style="margin-top: 2px"
              class="btn btn-success"
              title="Add Keyword"
            >
              <i class="fa-solid fa-pen-to-square"></i>&nbsp;&nbsp; Add Keyword
            </button>
            <button
              onclick="alertDeleteAllKeyword()"
              style="margin-top: 5px"
              class="btn btn-danger"
              data-bs-toggle="tooltip"
              data-bs-placement="top"
              title="Delete Keyword"
            >
              <i class="fa-solid fa-trash-can"></i>&nbsp;&nbsp; Delete All
              Keyword
            </button>
          </center>
          <div class="card-body">
            <div style="overflow-x: auto !important">
              <table class="table" id="table1">
                <thead>
                  <tr>
                    <th>Date</th>
                    <th>Session Name</th>
                    <th>Session Number</th>
                    <th>Keyword</th>
                    <th>Response</th>
                    <th>Media</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (Array.isArray(replyList) && replyList.length) { %> <%
                  replyList.forEach((el, index) => { %>
                  <tr>
                    <div id="listreply"></div>
                    <td><%= el.date %></td>
                    <td><%= el.session_name %></td>
                    <td><%= el.session_number %></td>
                    <td><%= el.keyword %></td>
                    <td><%= el.response %></td>
                    <td>
                      <% if (el.media_url) { %> <% if (el.media_type &&
                      el.media_type.startsWith('image/')) { %>
                      <img
                        src="<%= el.media_url %>"
                        alt="Media"
                        width="50"
                        height="50"
                      />
                      <% } else { %>
                      <a href="<%= el.media_url %>" target="_blank"
                        >View Media</a
                      >
                      <% } %> <% } else { %> N/A <% } %>
                    </td>
                    <td>
                      <button
                        onclick="alertKeywordAutoReply(false, '<%= el.session_number %>', '<%= el.keyword %>', '<%= el.response %>', '<%= el.media_url %>', '<%= el.media_type %>')"
                        style="margin-top: 5px"
                        class="btn btn-primary"
                        title="Edit Keyword"
                      >
                        <i class="fa-solid fa-pen-to-square"></i>
                      </button>
                      <button
                        onclick="alertDeleteAutoReply('<%= el.session_number %>', '<%= el.keyword %>')"
                        style="margin-top: 5px"
                        class="btn btn-danger"
                        data-bs-toggle="tooltip"
                        data-bs-placement="top"
                        title="Delete Keyword"
                      >
                        <i class="fa-solid fa-trash-can"></i>
                      </button>
                    </td>
                  </tr>
                  <% }); %> <% } %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </section>
    </div>
    <footer>
      <div class="divider">
        <div class="divider-text">
          <a href="https://github.com/fawwaz37/whatsapp-gateway" target="_blank"
            >Zekais - 2022 &copy; Mazer</a
          >
        </div>
      </div>
    </footer>
  </div>
</div>

<script src="/assets/extensions/jquery/jquery.min.js"></script>
<script src="https://cdn.datatables.net/v/bs5/dt-1.12.1/datatables.min.js"></script>
<script src="/assets/js/pages/datatables.js"></script>

<script>
  async function alertDeleteAutoReply(session_number, keyword) {
    Swal.fire({
      title: `Delete Auto Reply`,
      html: `Are You Sure Delete Keyword ${keyword}?`,
      icon: "question",
      confirmButtonText: `Delete`,
      showLoaderOnConfirm: true,
      preConfirm: () => {
        return fetch(
          `/reply/delete-reply?session=${session_number}&keyword=${keyword}`
        )
          .then((response) => {
            if (!response.ok) {
              throw new Error(response.statusText);
            }
            return response.json();
          })
          .catch((error) => {
            Swal.showValidationMessage(`Request failed: ${error}!`);
          });
      },
    }).then((result) => {
      if (result.isConfirmed) {
        if (result.value.status == 200) {
          Swal.fire(
            "Success!",
            JSON.stringify(result.value.message),
            "success"
          ).then(function () {
            window.location = "/dashboard/auto-reply";
          });
        } else {
          Swal.fire(
            `Status ${result.value.status}`,
            JSON.stringify(result.value.message),
            "error"
          );
        }
      }
    });
  }

  async function alertDeleteAllKeyword() {
    Swal.fire({
      title: `Delete All Keyword`,
      html: `Are You Sure Delete All Keyword?`,
      icon: "question",
      confirmButtonText: `Delete All`,
      showLoaderOnConfirm: true,
      preConfirm: () => {
        return fetch(`/reply/deleteall-reply`)
          .then((response) => {
            if (!response.ok) {
              throw new Error(response.statusText);
            }
            return response.json();
          })
          .catch((error) => {
            Swal.showValidationMessage(`Request failed: ${error}!`);
          });
      },
    }).then((result) => {
      if (result.isConfirmed) {
        if (result.value.status == 200) {
          Swal.fire(
            "Success!",
            JSON.stringify(result.value.message),
            "success"
          ).then(function () {
            window.location = "/dashboard/auto-reply";
          });
        } else {
          Swal.fire(
            `Status ${result.value.status}`,
            JSON.stringify(result.value.message),
            "error"
          );
        }
      }
    });
  }

  function alertKeywordAutoReply(
    add,
    sessionFromLoop,
    keyword,
    respon,
    media_url,
    media_type
  ) {
    // Renamed session to sessionFromLoop to avoid conflict with the global session variable
    var endpoint;
    if (add == true) {
      var titleSwal = "Add Auto Reply Message";
      var htmlSwal =
        "<center>" +
        '<label style="padding: 10px;">Session</label><div class="col-md-8 form-group"><select id="sessionId" name="sessions" class="form-select"><% if (Array.isArray(session) && session.length) { %> <% session.forEach((el, index) => { %><option><%= el.session_name %> (+<%= el.session_number %>)</option><% }) %> <% } %></select></div>' +
        '<label style="padding: 10px;">Keyword Message</label><div class="col-md-8 form-group"><input id="keywordId" type="text" name="keyword" class="form-control" placeholder="Hi" /></div>' +
        '<label style="padding: 10px;">Response Message</label><div class="col-md-8 form-group"><input id="responId" type="text" name="respon" class="form-control" placeholder="Yoo bro" /></div>' +
        '<label style="padding: 10px;">Media</label>' +
        '<div class="col-md-8 form-group">' +
        '  <ul class="nav nav-tabs" id="mediaSourceTab_add" role="tablist">' +
        '    <li class="nav-item" role="presentation">' +
        '      <button class="nav-link active" id="upload-tab-add" data-bs-toggle="tab" data-bs-target="#upload-content-add" type="button" role="tab" aria-controls="upload-content-add" aria-selected="true">Upload File</button>' +
        "    </li>" +
        '    <li class="nav-item" role="presentation">' +
        '      <button class="nav-link" id="library-tab-add" data-bs-toggle="tab" data-bs-target="#library-content-add" type="button" role="tab" aria-controls="library-content-add" aria-selected="false" onclick="loadMediaLibrary(\'add\')">From Library</button>' +
        "    </li>" +
        "  </ul>" +
        '  <div class="tab-content" id="mediaSourceTabContent_add">' +
        '    <div class="tab-pane fade show active" id="upload-content-add" role="tabpanel" aria-labelledby="upload-tab-add">' +
        '      <input id="mediaFileId_add" type="file" name="mediaFile" class="form-control mt-2" />' +
        "    </div>" +
        '    <div class="tab-pane fade" id="library-content-add" role="tabpanel" aria-labelledby="library-tab-add">' +
        '      <select id="mediaLibrarySelect_add" name="mediaLibraryFile" class="form-select mt-2"><option value="">Select from library...</option></select>' +
        '      <div id="mediaLibraryPreview_add" class="mt-2"></div>' +
        "    </div>" +
        "  </div>" +
        "</div>" +
        "</center>";
      var confirmButtonText = "Add Keyword";
    } else {
      var titleSwal = "Edit Auto Reply Message";
      var htmlSwal =
        "<center>" +
        `<label style="padding: 10px;">Keyword Message</label><div class="col-md-8 form-group"><input id="keywordId_edit" type="text" name="keyword" class="form-control" value="${keyword}" /></div>` +
        `<label style="padding: 10px;">Response Message</label><div class="col-md-8 form-group"><input id="responId_edit" type="text" name="respon" class="form-control" value="${respon}" /></div>` +
        '<label style="padding: 10px;">Media</label>';
      if (media_url && media_url !== "undefined" && media_url !== "null") {
        htmlSwal += `<div class="col-md-8 form-group"><label>Current Media:</label> `;
        if (media_type && media_type.startsWith("image/")) {
          htmlSwal += `<img src=\"${media_url}\" alt=\"Current Media\" width=\"100\" class=\"mt-2 img-thumbnail\">`;
        } else {
          htmlSwal += `<a href=\"${media_url}\" target=\"_blank\">View Media</a>`;
        }
        htmlSwal += ` (<a href=\"#\" onclick=\"removeCurrentMedia_edit(); return false;\">Remove</a>)</div>`;
      }
      htmlSwal += '<div class="col-md-8 form-group">';
      htmlSwal +=
        '  <ul class="nav nav-tabs" id="mediaSourceTab_edit" role="tablist">' +
        '    <li class="nav-item" role="presentation">' +
        '      <button class="nav-link active" id="upload-tab-edit" data-bs-toggle="tab" data-bs-target="#upload-content-edit" type="button" role="tab" aria-controls="upload-content-edit" aria-selected="true">Upload New File</button>' +
        "    </li>" +
        '    <li class="nav-item" role="presentation">' +
        '      <button class="nav-link" id="library-tab-edit" data-bs-toggle="tab" data-bs-target="#library-content-edit" type="button" role="tab" aria-controls="library-content-edit" aria-selected="false" onclick="loadMediaLibrary(\'edit\')">From Library</button>' +
        "    </li>" +
        "  </ul>" +
        '  <div class="tab-content" id="mediaSourceTabContent_edit">' +
        '    <div class="tab-pane fade show active" id="upload-content-edit" role="tabpanel" aria-labelledby="upload-tab-edit">' +
        '      <input id="mediaFileId_edit" type="file" name="mediaFile" class="form-control mt-2" />' +
        "    </div>" +
        '    <div class="tab-pane fade" id="library-content-edit" role="tabpanel" aria-labelledby="library-tab-edit">' +
        '      <select id="mediaLibrarySelect_edit" name="mediaLibraryFile" class="form-select mt-2"><option value="">Select from library...</option></select>' +
        '      <div id="mediaLibraryPreview_edit" class="mt-2"></div>' +
        "    </div>" +
        "  </div>" +
        "</div>" +
        "</center>";
      var confirmButtonText = "Edit Keyword";
    }
    Swal.fire({
      title: titleSwal,
      html: htmlSwal,
      focusConfirm: false,
      showCancelButton: true,
      confirmButtonText,
      showLoaderOnConfirm: true,
      preConfirm: () => {
        const formData = new FormData();
        let mediaFile, mediaLibraryFile, activeTabId;

        if (add == true) {
          var endpoint = `create-reply`;
          formData.append(
            "session",
            document.getElementById("sessionId").value
          );
          formData.append(
            "keyword",
            document.getElementById("keywordId").value
          );
          formData.append("respon", document.getElementById("responId").value);
          activeTabId = document.querySelector(
            "#mediaSourceTab_add .nav-link.active"
          ).id;
          if (activeTabId === "upload-tab-add") {
            mediaFile = document.getElementById("mediaFileId_add").files[0];
            if (mediaFile) {
              formData.append("mediaFile", mediaFile);
            }
          } else if (activeTabId === "library-tab-add") {
            mediaLibraryFile = document.getElementById(
              "mediaLibrarySelect_add"
            ).value;
            if (mediaLibraryFile) {
              formData.append("mediaLibraryId", mediaLibraryFile);
            }
          }
        } else {
          // Edit mode
          var endpoint = `edit-reply`;
          formData.append("session", sessionFromLoop);
          formData.append("keyword", keyword); // original keyword
          formData.append(
            "newKeyword",
            document.getElementById("keywordId_edit").value
          );
          formData.append(
            "newRespon",
            document.getElementById("responId_edit").value
          );

          // Check if the current media preview was hidden (meaning user wants to remove it)
          const currentMediaDisplay = document.querySelector(
            "#swal2-html-container .current-media-display-container"
          );
          if (
            currentMediaDisplay &&
            currentMediaDisplay.style.display === "none"
          ) {
            formData.append("keepOldMedia", "false");
          } else {
            formData.append("keepOldMedia", "true");
          }

          activeTabId = document.querySelector(
            "#mediaSourceTab_edit .nav-link.active"
          ).id;
          if (activeTabId === "upload-tab-edit") {
            mediaFile = document.getElementById("mediaFileId_edit").files[0];
            if (mediaFile) {
              formData.append("mediaFile", mediaFile);
              formData.append("keepOldMedia", "false"); // New upload implies not keeping old one
            }
          } else if (activeTabId === "library-tab-edit") {
            mediaLibraryFile = document.getElementById(
              "mediaLibrarySelect_edit"
            ).value;
            if (mediaLibraryFile) {
              formData.append("mediaLibraryId", mediaLibraryFile);
              formData.append("keepOldMedia", "false"); // New selection implies not keeping old one
            }
          }
        }
        return fetch(`/reply/${endpoint}`, {
          method: "POST",
          body: formData, // Use FormData for file upload
          // headers: { "Content-Type": "application/json" }, // Remove Content-Type header for FormData
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(response.statusText);
            }
            return response.json();
          })
          .catch((error) => {
            Swal.showValidationMessage(
              `Request failed: ${error}! Input Your Data!`
            );
          });
      },
      allowOutsideClick: () => !Swal.isLoading(),
    }).then((result) => {
      if (result.isConfirmed) {
        Swal.fire(
          "Success!",
          "Success Setting Auto Reply Message",
          "success"
        ).then(function () {
          window.location = "/dashboard/auto-reply";
        });
      }
    });
  }

  function removeCurrentMedia_edit() {
    const currentMediaContainer = document.querySelector(
      "#swal2-html-container .current-media-display-container"
    );
    if (currentMediaContainer) {
      currentMediaContainer.style.display = "none";
    }
    // No need for a hidden input, the backend will check `keepOldMedia` along with whether a new file/library item is provided.
    // The logic in preConfirm for edit mode has been updated to set keepOldMedia based on this display style.
  }

  async function loadMediaLibrary(mode) {
    // mode can be 'add' or 'edit'
    const selectElement = document.getElementById(`mediaLibrarySelect_${mode}`);
    const previewElement = document.getElementById(
      `mediaLibraryPreview_${mode}`
    );
    selectElement.innerHTML = '<option value="">Loading library...</option>'; // Clear previous options
    previewElement.innerHTML = "";

    try {
      const response = await fetch("/dashboard/media-library/api/list");
      if (!response.ok) throw new Error("Failed to load media library");
      const result = await response.json();

      if (result.success && result.mediaItems.length > 0) {
        selectElement.innerHTML =
          '<option value="">Select from library...</option>'; // Reset
        result.mediaItems.forEach((item) => {
          const option = document.createElement("option");
          option.value = item.id;
          option.textContent = `${item.name} (${item.file_name})`;
          option.dataset.filePath = item.file_path; // Store full path if needed, or relative
          option.dataset.mimeType = item.mime_type;
          option.dataset.fileName = item.file_name;
          selectElement.appendChild(option);
        });

        selectElement.onchange = function () {
          const selectedOption = this.options[this.selectedIndex];
          if (selectedOption.value) {
            const mimeType = selectedOption.dataset.mimeType;
            const fileName = selectedOption.dataset.fileName;
            let previewHTML = "";
            if (mimeType && mimeType.startsWith("image/")) {
              previewHTML = `<img src=\"<%= baseUrl %>/media/library/${fileName}\" alt=\"Preview\" style=\"max-width: 100px; max-height: 100px; margin-top: 10px;\">`;
            } else if (mimeType && mimeType.startsWith("video/")) {
              previewHTML = `<video controls src=\"<%= baseUrl %>/media/library/${fileName}\" style=\"max-width: 200px; margin-top: 10px;\"></video>`;
            } else if (mimeType && mimeType.startsWith("audio/")) {
              previewHTML = `<audio controls src=\"<%= baseUrl %>/media/library/${fileName}\" style=\"margin-top: 10px;\"></audio>`;
            } else {
              previewHTML = `<p class=\"mt-2\">Preview not available for this file type.</p>`;
            }
            previewElement.innerHTML = previewHTML;
          } else {
            previewElement.innerHTML = "";
          }
        };
      } else if (result.success && result.mediaItems.length === 0) {
        selectElement.innerHTML =
          '<option value="">No media in library.</option>';
      } else {
        selectElement.innerHTML =
          '<option value="">Error loading library.</option>';
        console.error("Error loading media library:", result.message);
      }
    } catch (error) {
      selectElement.innerHTML =
        '<option value="">Error loading library.</option>';
      console.error("Failed to fetch media library:", error);
    }
  }
</script>
